Upstream PR #145 already present in master.

---

diff -aur a/rngd.c b/rngd.c
--- a/rngd.c
+++ b/rngd.c
@@ -924,7 +924,7 @@
 
 	if (!ent_sources) {
 		message(LOG_DAEMON|LOG_ERR,
-			"can't open any entropy source");
+			"Can't open any entropy source\n");
 		message(LOG_DAEMON|LOG_ERR,
 			"Maybe RNG device modules are not loaded\n");
 		return 1;
diff -aur a/rngd_jitter.c b/rngd_jitter.c
--- a/rngd_jitter.c
+++ b/rngd_jitter.c
@@ -46,7 +46,7 @@
 {
 	struct jent_notime_ctx *thread_ctx = (struct jent_notime_ctx *)ctx;
 	int ret;
-	int i;
+	long i;
 	cpu_set_t *cpus;
 	size_t cpusize;
 
@@ -60,12 +60,12 @@
 	/*
  	 * the soft timer function should affine to all cpus
  	 */
-	i = sysconf(_SC_NPROCESSORS_CONF);
+	i = sysconf(_SC_NPROCESSORS_ONLN);
 	cpus = CPU_ALLOC(i);
 	cpusize = CPU_ALLOC_SIZE(i);
 	CPU_ZERO_S(cpusize, cpus);
-	for(i=i-1;i>=0;i--) {
-		CPU_SET(i,cpus);
+	for(i=i-1; i>=0; i--) {
+		CPU_SET(i, cpus);
 	}
 	pthread_attr_setaffinity_np(&thread_ctx->notime_pthread_attr, cpusize, cpus);
 
@@ -85,9 +85,20 @@
 	pthread_attr_destroy(&thread_ctx->notime_pthread_attr);
 }
 
-
 static int rngd_notime_init(void **ctx)
 {
+	long ncpu = sysconf(_SC_NPROCESSORS_ONLN);
+
+	if (ncpu == -1)
+		return -errno;
+
+	if (ncpu == 0)
+		return -EFAULT;
+
+	// Don't allow for software thread if there is only a single cpu
+	if (ncpu < 2)
+		return -EOPNOTSUPP;
+
 	using_soft_timer = true;
 	return jent_notime_init(ctx);
 }
@@ -105,8 +116,9 @@
 #define RDRAND_ROUNDS           512             /* 512:1 data reduction */
 
 static int num_threads = 0;
+
 struct thread_data {
-        struct rng *ent_src;
+	struct rng *ent_src;
 	int core_id;
 	int pipe_fd;
 	struct rand_data *ec;
@@ -118,7 +130,7 @@
 	/* done states -1 : init, 0 : ready, 1 : complete */
 	int done;
 	struct timespec slptm;
-	sigjmp_buf	jmpbuf;
+	sigjmp_buf jmpbuf;
 };
 
 
@@ -192,8 +204,8 @@
 	if (start->tv_nsec >= end->tv_nsec)
 		delta = (delta * 1.0e9) + (start->tv_nsec - end->tv_nsec);
 	else
-		delta = ((delta + 1) * 1.0e9) + (end->tv_nsec - start->tv_nsec);	
-	delta = delta / 1.0e9; 
+		delta = ((delta + 1) * 1.0e9) + (end->tv_nsec - start->tv_nsec);
+	delta = delta / 1.0e9;
 
 	return delta;
 }
@@ -202,7 +214,6 @@
 				     struct timespec *start,
 				     struct timespec *end)
 {
-
 	/*
 	 * if slpmode is anything other than -1
 	 * it will be a positive integer representing
@@ -244,7 +255,7 @@
 
 	/*
 	 * Set our timeout value
-	 * -1 means adaptive, i.e. sleep for the last 
+	 * -1 means adaptive, i.e. sleep for the last
 	 * recorded execution time of a jitter read
 	 * otherwise sleep for slpmode seconds
 	 */
@@ -265,7 +276,7 @@
 	}
 
 	/*
-	 * A signal will call siglongjmp and return us here when we exit 
+	 * A signal will call siglongjmp and return us here when we exit
 	 */
 	if (sigsetjmp(me->jmpbuf, 1))
 		goto out_interrupt;
@@ -356,7 +367,6 @@
 	return 0;
 }
 
-
 /*
  * Init JITTER
  */
@@ -364,7 +374,7 @@
 {
 	cpu_set_t *cpus;
 	size_t cpusize;
-	int i;
+	long i;
 	int size;
 	int flags;
 	int entflags = 0;
@@ -388,7 +398,7 @@
 #endif
 
 	ret = jent_entropy_init();
-	if(ret) {
+	if (ret) {
 		message_entsrc(ent_src,LOG_DAEMON|LOG_WARNING, "JITTER rng fails with code %d\n", ret);
 		return 1;
 	}
@@ -403,13 +413,13 @@
  	 * 2 threads for two or more cpus
  	 * 4 threads for four or more cpus
  	 */
-	i = sysconf(_SC_NPROCESSORS_CONF);
+	i = sysconf(_SC_NPROCESSORS_ONLN);
 	cpus = CPU_ALLOC(i);
 	cpusize = CPU_ALLOC_SIZE(i);
 	CPU_ZERO_S(cpusize, cpus);
 	if (sched_getaffinity(0, cpusize, cpus) < 0) {
 		message_entsrc(ent_src,LOG_DAEMON|LOG_DEBUG, "Can not determine affinity of process, defaulting to 1 thread\n");
-		CPU_SET(0,cpus);
+		CPU_SET(0, cpus);
 	}
 
 	num_threads = CPU_COUNT_S(cpusize, cpus);
@@ -449,6 +459,14 @@
 		core_id++;
 		tdata[i].buf_sz = ent_src->rng_options[JITTER_OPT_BUF_SZ].int_val;
 		tdata[i].ec = jent_entropy_collector_alloc(1, entflags);
+		if (tdata[i].ec == NULL) {
+			message_entsrc(ent_src,LOG_DAEMON|LOG_WARNING, "Unable to start thread for jitter, likely due to lack of cpu count\n");
+			close(pipefds[0]);
+			close(pipefds[1]);
+			free(tdata);
+			free(threads);
+			return 1;
+		}
 		tdata[i].slpmode = ent_src->rng_options[JITTER_OPT_RETRY_DELAY].int_val;
 		pthread_create(&threads[i], NULL, thread_entropy_task, &tdata[i]);
 		pthread_mutex_lock(&tdata[i].statemtx);
@@ -456,9 +474,9 @@
 			pthread_cond_wait(&tdata[i].statecond, &tdata[i].statemtx);
 		if (tdata[i].done == 1)
 			/* we failed during startup */
-			message_entsrc(ent_src, LOG_DAEMON|LOG_DEBUG, "CPU thread %d failed\n", i);
+			message_entsrc(ent_src, LOG_DAEMON|LOG_DEBUG, "CPU thread %ld failed\n", i);
 		else
-			message_entsrc(ent_src,LOG_DAEMON|LOG_DEBUG, "CPU Thread %d is ready\n", i);
+			message_entsrc(ent_src,LOG_DAEMON|LOG_DEBUG, "CPU Thread %ld is ready\n", i);
 		pthread_mutex_unlock(&tdata[i].statemtx);
 		if (using_soft_timer == true) {
 			num_threads = 1;
diff -aur a/tests/rngtestjitter.sh b/tests/rngtestjitter.sh
--- a/tests/rngtestjitter.sh
+++ b/tests/rngtestjitter.sh
@@ -2,7 +2,7 @@
 
 # Test that we catch a repeating zero failure in rngtest
 ./rngd -f -o /dev/stdout -x hwrng -x rdrand -x tpm -O jitter:use_aes:1 | ../rngtest -c 100 --pipe > /dev/null
-if [ $? -eq 0 ]
+if [ $? -ne 0 ]
 then
 	exit 1
 fi

--- a/refind/launch_efi.c
+++ b/refind/launch_efi.c
@@ -374,7 +374,7 @@
     BeginExternalScreen(Entry->UseGraphicsMode, L"Booting OS");
     StoreLoaderName(SelectionName);
     StartEFIImage(Entry->Volume, Entry->LoaderPath, Entry->LoadOptions,
-                  LoaderPath, Entry->OSType, !Entry->UseGraphicsMode, FALSE);
+                  LoaderPath, Entry->OSType, !Entry->UseGraphicsMode && GlobalConfig.Timeout != -1, FALSE);
     MyFreePool(LoaderPath);
 } // VOID StartLoader()


--- a/refind/main.c
+++ b/refind/main.c
@@ -447,6 +447,10 @@
     EFI_STATUS         Status;
     BOOLEAN            MainLoopRunning = TRUE;
     BOOLEAN            MokProtocol;
+    BOOLEAN            Silent = FALSE;
+    CHAR16             KeyAsString[2];
+    INTN               ShortcutEntry;
+    EFI_INPUT_KEY      key;
     REFIT_MENU_ENTRY   *ChosenEntry;
     UINTN              MenuExit, i;
     CHAR16             *SelectionName = NULL;
@@ -485,7 +489,31 @@
     if (GlobalConfig.SpoofOSXVersion && GlobalConfig.SpoofOSXVersion[0] != L'\0')
         SetAppleOSInfo();
 
-    InitScreen();
+    SetVolumeIcons();
+    ScanForBootloaders(FALSE);
+    ScanForTools();
+
+    if (GlobalConfig.Timeout == -1) {
+        Status = refit_call2_wrapper(ST->ConIn->ReadKeyStroke, ST->ConIn, &key);
+        //Silent = Status == EFI_NOT_READY;
+        if (Status == EFI_NOT_READY) {
+            Silent = TRUE;
+        } else {
+            KeyAsString[0] = key.UnicodeChar;
+            KeyAsString[1] = 0;
+            ShortcutEntry = FindMenuShortcutEntry(&MainMenu, KeyAsString);
+            if (ShortcutEntry >= 0) {
+                ChosenEntry = MainMenu.Entries[ShortcutEntry];
+                SelectionName = StrDuplicate(ChosenEntry->Title);
+                Silent = TRUE;
+            } else {
+                GlobalConfig.Timeout = 0;
+            }
+        }
+    }
+
+    if (!Silent)
+        InitScreen();
     WarnIfLegacyProblems();
     MainMenu.TimeoutSeconds = GlobalConfig.Timeout;
 
@@ -494,10 +522,9 @@
     refit_call4_wrapper(BS->SetWatchdogTimer, 0x0000, 0x0000, 0x0000, NULL);
 
     // further bootstrap (now with config available)
-    SetupScreen();
-    SetVolumeIcons();
-    ScanForBootloaders(FALSE);
-    ScanForTools();
+
+    if (!Silent)
+        SetupScreen();
     // SetupScreen() clears the screen; but ScanForBootloaders() may display a
     // message that must be deleted, so do so
     BltClearScreen(TRUE);
@@ -514,14 +541,17 @@
        BltClearScreen(TRUE);
     } // if
 
-    if (GlobalConfig.DefaultSelection)
+    if (GlobalConfig.DefaultSelection && !SelectionName)
        SelectionName = StrDuplicate(GlobalConfig.DefaultSelection);
     if (GlobalConfig.ShutdownAfterTimeout)
         MainMenu.TimeoutText = L"Shutdown";
 
     LOG(1, LOG_LINE_SEPARATOR, L"Entering main loop");
     while (MainLoopRunning) {
-        MenuExit = RunMainMenu(&MainMenu, &SelectionName, &ChosenEntry);
+        if (!Silent)
+            MenuExit = RunMainMenu(&MainMenu, &SelectionName, &ChosenEntry);
+        // Give it a chance to RunMainMenu next loop if it fails
+        Silent = FALSE;
 
         // The Escape key triggers a re-scan operation....
         if (MenuExit == MENU_EXIT_ESCAPE) {

--- a/refind/menu.c
+++ b/refind/menu.c
@@ -316,7 +316,7 @@
 }
 
 
-static INTN FindMenuShortcutEntry(IN REFIT_MENU_SCREEN *Screen, IN CHAR16 *Defaults) {
+INTN FindMenuShortcutEntry(IN REFIT_MENU_SCREEN *Screen, IN CHAR16 *Defaults) {
     UINTN i, j = 0, ShortcutLength;
     CHAR16 *Shortcut;

--- a/refind/menu.h
+++ b/refind/menu.h
@@ -111,6 +111,7 @@
 
 VOID AddMenuInfoLine(IN REFIT_MENU_SCREEN *Screen, IN CHAR16 *InfoLine);
 VOID AddMenuEntry(IN REFIT_MENU_SCREEN *Screen, IN REFIT_MENU_ENTRY *Entry);
+INTN FindMenuShortcutEntry(IN REFIT_MENU_SCREEN *Screen, IN CHAR16 *Defaults);
 UINTN ComputeRow0PosY(VOID);
 VOID MainMenuStyle(IN REFIT_MENU_SCREEN *Screen, IN SCROLL_STATE *State, IN UINTN Function, IN CHAR16 *ParamText);
 UINTN RunMenu(IN REFIT_MENU_SCREEN *Screen, OUT REFIT_MENU_ENTRY **ChosenEntry);

--- a/refind/screen.c
+++ b/refind/screen.c
@@ -79,6 +79,7 @@
 UINTN UGAHeight;
 BOOLEAN AllowGraphicsMode;
 BOOLEAN HaveResized = FALSE;
+BOOLEAN Initialized = FALSE;
 
 EG_PIXEL StdBackgroundPixel  = { 0xbf, 0xbf, 0xbf, 0 };
 EG_PIXEL MenuBackgroundPixel = { 0xbf, 0xbf, 0xbf, 0 };
@@ -138,12 +139,17 @@
     // show the banner if in text mode
     if (GlobalConfig.TextOnly && (GlobalConfig.ScreensaverTime != -1))
        DrawScreenHeader(L"Initializing...");
+
+    Initialized = TRUE;
 }
 
 // Set the screen resolution and mode (text vs. graphics).
 VOID SetupScreen(VOID)
 {
     UINTN NewWidth, NewHeight;
+
+    if (!Initialized)
+        return;
 
     LOG(1, LOG_LINE_NORMAL, L"Setting screen resolution and mode");
     // Convert mode number to horizontal & vertical resolution values
@@ -242,6 +248,9 @@
 
 VOID BeginExternalScreen(IN BOOLEAN UseGraphicsMode, IN CHAR16 *Title)
 {
+    if (!Initialized)
+        return;
+
     if (!AllowGraphicsMode)
         UseGraphicsMode = FALSE;
 
@@ -437,6 +446,9 @@
     EG_IMAGE *NewBanner = NULL;
     INTN BannerPosX, BannerPosY;
     EG_PIXEL Black = { 0x0, 0x0, 0x0, 0 };
+
+    if (!Initialized)
+        return;
 
     if (ShowBanner && !(GlobalConfig.HideUIFlags & HIDEUI_FLAG_BANNER)) {
         // load banner on first call

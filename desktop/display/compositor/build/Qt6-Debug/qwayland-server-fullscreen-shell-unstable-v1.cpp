// This file was generated by qtwaylandscanner
// source file is fullscreen-shell-unstable-v1.xml

#include "qwayland-server-fullscreen-shell-unstable-v1.h"

QT_BEGIN_NAMESPACE
QT_WARNING_PUSH
QT_WARNING_DISABLE_GCC("-Wmissing-field-initializers")
QT_WARNING_DISABLE_CLANG("-Wmissing-field-initializers")

namespace QtWaylandServer {
    zwp_fullscreen_shell_v1::zwp_fullscreen_shell_v1(struct ::wl_client *client, uint32_t id, int version)
        : m_resource_map()
        , m_resource(nullptr)
        , m_global(nullptr)
    {
        init(client, id, version);
    }

    zwp_fullscreen_shell_v1::zwp_fullscreen_shell_v1(struct ::wl_display *display, int version)
        : m_resource_map()
        , m_resource(nullptr)
        , m_global(nullptr)
    {
        init(display, version);
    }

    zwp_fullscreen_shell_v1::zwp_fullscreen_shell_v1(struct ::wl_resource *resource)
        : m_resource_map()
        , m_resource(nullptr)
        , m_global(nullptr)
    {
        init(resource);
    }

    zwp_fullscreen_shell_v1::zwp_fullscreen_shell_v1()
        : m_resource_map()
        , m_resource(nullptr)
        , m_global(nullptr)
    {
    }

    zwp_fullscreen_shell_v1::~zwp_fullscreen_shell_v1()
    {
        for (auto resource : std::as_const(m_resource_map))
            resource->zwp_fullscreen_shell_v1_object = nullptr;

        if (m_resource)
            m_resource->zwp_fullscreen_shell_v1_object = nullptr;

        if (m_global) {
            wl_global_destroy(m_global);
            wl_list_remove(&m_displayDestroyedListener.link);
        }
    }

    void zwp_fullscreen_shell_v1::init(struct ::wl_client *client, uint32_t id, int version)
    {
        m_resource = bind(client, id, version);
    }

    void zwp_fullscreen_shell_v1::init(struct ::wl_resource *resource)
    {
        m_resource = bind(resource);
    }

    zwp_fullscreen_shell_v1::Resource *zwp_fullscreen_shell_v1::add(struct ::wl_client *client, int version)
    {
        Resource *resource = bind(client, 0, version);
        m_resource_map.insert(client, resource);
        return resource;
    }

    zwp_fullscreen_shell_v1::Resource *zwp_fullscreen_shell_v1::add(struct ::wl_client *client, uint32_t id, int version)
    {
        Resource *resource = bind(client, id, version);
        m_resource_map.insert(client, resource);
        return resource;
    }

    void zwp_fullscreen_shell_v1::init(struct ::wl_display *display, int version)
    {
        m_global = wl_global_create(display, &::zwp_fullscreen_shell_v1_interface, version, this, bind_func);
        m_displayDestroyedListener.notify = zwp_fullscreen_shell_v1::display_destroy_func;
        m_displayDestroyedListener.parent = this;
        wl_display_add_destroy_listener(display, &m_displayDestroyedListener);
    }

    const struct wl_interface *zwp_fullscreen_shell_v1::interface()
    {
        return &::zwp_fullscreen_shell_v1_interface;
    }

    zwp_fullscreen_shell_v1::Resource *zwp_fullscreen_shell_v1::zwp_fullscreen_shell_v1_allocate()
    {
        return new Resource;
    }

    void zwp_fullscreen_shell_v1::zwp_fullscreen_shell_v1_bind_resource(Resource *)
    {
    }

    void zwp_fullscreen_shell_v1::zwp_fullscreen_shell_v1_destroy_resource(Resource *)
    {
    }

    void zwp_fullscreen_shell_v1::bind_func(struct ::wl_client *client, void *data, uint32_t version, uint32_t id)
    {
        zwp_fullscreen_shell_v1 *that = static_cast<zwp_fullscreen_shell_v1 *>(data);
        that->add(client, id, version);
    }

    void zwp_fullscreen_shell_v1::display_destroy_func(struct ::wl_listener *listener, void *data)
    {
        Q_UNUSED(data);
        zwp_fullscreen_shell_v1 *that = static_cast<zwp_fullscreen_shell_v1::DisplayDestroyedListener *>(listener)->parent;
        that->m_global = nullptr;
    }

    void zwp_fullscreen_shell_v1::destroy_func(struct ::wl_resource *client_resource)
    {
        Resource *resource = Resource::fromResource(client_resource);
        Q_ASSERT(resource);
        zwp_fullscreen_shell_v1 *that = resource->zwp_fullscreen_shell_v1_object;
        if (Q_LIKELY(that)) {
            that->m_resource_map.remove(resource->client(), resource);
            that->zwp_fullscreen_shell_v1_destroy_resource(resource);

            that = resource->zwp_fullscreen_shell_v1_object;
            if (that && that->m_resource == resource)
                that->m_resource = nullptr;
        }
        delete resource;
    }

    zwp_fullscreen_shell_v1::Resource *zwp_fullscreen_shell_v1::bind(struct ::wl_client *client, uint32_t id, int version)
    {
        Q_ASSERT_X(!wl_client_get_object(client, id), "QWaylandObject bind", QStringLiteral("binding to object %1 more than once").arg(id).toLocal8Bit().constData());
        struct ::wl_resource *handle = wl_resource_create(client, &::zwp_fullscreen_shell_v1_interface, version, id);
        return bind(handle);
    }

    zwp_fullscreen_shell_v1::Resource *zwp_fullscreen_shell_v1::bind(struct ::wl_resource *handle)
    {
        Resource *resource = zwp_fullscreen_shell_v1_allocate();
        resource->zwp_fullscreen_shell_v1_object = this;

        wl_resource_set_implementation(handle, &m_zwp_fullscreen_shell_v1_interface, resource, destroy_func);
        resource->handle = handle;
        zwp_fullscreen_shell_v1_bind_resource(resource);
        return resource;
    }
    zwp_fullscreen_shell_v1::Resource *zwp_fullscreen_shell_v1::Resource::fromResource(struct ::wl_resource *resource)
    {
        if (Q_UNLIKELY(!resource))
            return nullptr;
        if (wl_resource_instance_of(resource, &::zwp_fullscreen_shell_v1_interface, &m_zwp_fullscreen_shell_v1_interface))
            return static_cast<Resource *>(wl_resource_get_user_data(resource));
        return nullptr;
    }

    const struct ::zwp_fullscreen_shell_v1_interface zwp_fullscreen_shell_v1::m_zwp_fullscreen_shell_v1_interface = {
        zwp_fullscreen_shell_v1::handle_release,
        zwp_fullscreen_shell_v1::handle_present_surface,
        zwp_fullscreen_shell_v1::handle_present_surface_for_mode
    };

    void zwp_fullscreen_shell_v1::zwp_fullscreen_shell_v1_release(Resource *)
    {
    }

    void zwp_fullscreen_shell_v1::zwp_fullscreen_shell_v1_present_surface(Resource *, struct ::wl_resource *, uint32_t , struct ::wl_resource *)
    {
    }

    void zwp_fullscreen_shell_v1::zwp_fullscreen_shell_v1_present_surface_for_mode(Resource *, struct ::wl_resource *, struct ::wl_resource *, int32_t , uint32_t)
    {
    }


    void zwp_fullscreen_shell_v1::handle_release(
        ::wl_client *client,
        struct wl_resource *resource)
    {
        Q_UNUSED(client);
        Resource *r = Resource::fromResource(resource);
        if (Q_UNLIKELY(!r->zwp_fullscreen_shell_v1_object)) {
            wl_resource_destroy(resource);
            return;
        }
        static_cast<zwp_fullscreen_shell_v1 *>(r->zwp_fullscreen_shell_v1_object)->zwp_fullscreen_shell_v1_release(
            r);
    }

    void zwp_fullscreen_shell_v1::handle_present_surface(
        ::wl_client *client,
        struct wl_resource *resource,
        struct ::wl_resource *surface,
        uint32_t method,
        struct ::wl_resource *output)
    {
        Q_UNUSED(client);
        Resource *r = Resource::fromResource(resource);
        if (Q_UNLIKELY(!r->zwp_fullscreen_shell_v1_object)) {
            return;
        }
        static_cast<zwp_fullscreen_shell_v1 *>(r->zwp_fullscreen_shell_v1_object)->zwp_fullscreen_shell_v1_present_surface(
            r,
            surface,
            method,
            output);
    }

    void zwp_fullscreen_shell_v1::handle_present_surface_for_mode(
        ::wl_client *client,
        struct wl_resource *resource,
        struct ::wl_resource *surface,
        struct ::wl_resource *output,
        int32_t framerate,
        uint32_t feedback)
    {
        Q_UNUSED(client);
        Resource *r = Resource::fromResource(resource);
        if (Q_UNLIKELY(!r->zwp_fullscreen_shell_v1_object)) {
            return;
        }
        static_cast<zwp_fullscreen_shell_v1 *>(r->zwp_fullscreen_shell_v1_object)->zwp_fullscreen_shell_v1_present_surface_for_mode(
            r,
            surface,
            output,
            framerate,
            feedback);
    }

    void zwp_fullscreen_shell_v1::send_capability(uint32_t capability)
    {
        Q_ASSERT_X(m_resource, "zwp_fullscreen_shell_v1::capability", "Uninitialised resource");
        if (Q_UNLIKELY(!m_resource)) {
            qWarning("could not call zwp_fullscreen_shell_v1::capability as it's not initialised");
            return;
        }
        send_capability(
            m_resource->handle,
            capability);
    }

    void zwp_fullscreen_shell_v1::send_capability(struct ::wl_resource *resource, uint32_t capability)
    {
        zwp_fullscreen_shell_v1_send_capability(
            resource,
            capability);
    }


    zwp_fullscreen_shell_mode_feedback_v1::zwp_fullscreen_shell_mode_feedback_v1(struct ::wl_client *client, uint32_t id, int version)
        : m_resource_map()
        , m_resource(nullptr)
        , m_global(nullptr)
    {
        init(client, id, version);
    }

    zwp_fullscreen_shell_mode_feedback_v1::zwp_fullscreen_shell_mode_feedback_v1(struct ::wl_display *display, int version)
        : m_resource_map()
        , m_resource(nullptr)
        , m_global(nullptr)
    {
        init(display, version);
    }

    zwp_fullscreen_shell_mode_feedback_v1::zwp_fullscreen_shell_mode_feedback_v1(struct ::wl_resource *resource)
        : m_resource_map()
        , m_resource(nullptr)
        , m_global(nullptr)
    {
        init(resource);
    }

    zwp_fullscreen_shell_mode_feedback_v1::zwp_fullscreen_shell_mode_feedback_v1()
        : m_resource_map()
        , m_resource(nullptr)
        , m_global(nullptr)
    {
    }

    zwp_fullscreen_shell_mode_feedback_v1::~zwp_fullscreen_shell_mode_feedback_v1()
    {
        for (auto resource : std::as_const(m_resource_map))
            resource->zwp_fullscreen_shell_mode_feedback_v1_object = nullptr;

        if (m_resource)
            m_resource->zwp_fullscreen_shell_mode_feedback_v1_object = nullptr;

        if (m_global) {
            wl_global_destroy(m_global);
            wl_list_remove(&m_displayDestroyedListener.link);
        }
    }

    void zwp_fullscreen_shell_mode_feedback_v1::init(struct ::wl_client *client, uint32_t id, int version)
    {
        m_resource = bind(client, id, version);
    }

    void zwp_fullscreen_shell_mode_feedback_v1::init(struct ::wl_resource *resource)
    {
        m_resource = bind(resource);
    }

    zwp_fullscreen_shell_mode_feedback_v1::Resource *zwp_fullscreen_shell_mode_feedback_v1::add(struct ::wl_client *client, int version)
    {
        Resource *resource = bind(client, 0, version);
        m_resource_map.insert(client, resource);
        return resource;
    }

    zwp_fullscreen_shell_mode_feedback_v1::Resource *zwp_fullscreen_shell_mode_feedback_v1::add(struct ::wl_client *client, uint32_t id, int version)
    {
        Resource *resource = bind(client, id, version);
        m_resource_map.insert(client, resource);
        return resource;
    }

    void zwp_fullscreen_shell_mode_feedback_v1::init(struct ::wl_display *display, int version)
    {
        m_global = wl_global_create(display, &::zwp_fullscreen_shell_mode_feedback_v1_interface, version, this, bind_func);
        m_displayDestroyedListener.notify = zwp_fullscreen_shell_mode_feedback_v1::display_destroy_func;
        m_displayDestroyedListener.parent = this;
        wl_display_add_destroy_listener(display, &m_displayDestroyedListener);
    }

    const struct wl_interface *zwp_fullscreen_shell_mode_feedback_v1::interface()
    {
        return &::zwp_fullscreen_shell_mode_feedback_v1_interface;
    }

    zwp_fullscreen_shell_mode_feedback_v1::Resource *zwp_fullscreen_shell_mode_feedback_v1::zwp_fullscreen_shell_mode_feedback_v1_allocate()
    {
        return new Resource;
    }

    void zwp_fullscreen_shell_mode_feedback_v1::zwp_fullscreen_shell_mode_feedback_v1_bind_resource(Resource *)
    {
    }

    void zwp_fullscreen_shell_mode_feedback_v1::zwp_fullscreen_shell_mode_feedback_v1_destroy_resource(Resource *)
    {
    }

    void zwp_fullscreen_shell_mode_feedback_v1::bind_func(struct ::wl_client *client, void *data, uint32_t version, uint32_t id)
    {
        zwp_fullscreen_shell_mode_feedback_v1 *that = static_cast<zwp_fullscreen_shell_mode_feedback_v1 *>(data);
        that->add(client, id, version);
    }

    void zwp_fullscreen_shell_mode_feedback_v1::display_destroy_func(struct ::wl_listener *listener, void *data)
    {
        Q_UNUSED(data);
        zwp_fullscreen_shell_mode_feedback_v1 *that = static_cast<zwp_fullscreen_shell_mode_feedback_v1::DisplayDestroyedListener *>(listener)->parent;
        that->m_global = nullptr;
    }

    void zwp_fullscreen_shell_mode_feedback_v1::destroy_func(struct ::wl_resource *client_resource)
    {
        Resource *resource = Resource::fromResource(client_resource);
        Q_ASSERT(resource);
        zwp_fullscreen_shell_mode_feedback_v1 *that = resource->zwp_fullscreen_shell_mode_feedback_v1_object;
        if (Q_LIKELY(that)) {
            that->m_resource_map.remove(resource->client(), resource);
            that->zwp_fullscreen_shell_mode_feedback_v1_destroy_resource(resource);

            that = resource->zwp_fullscreen_shell_mode_feedback_v1_object;
            if (that && that->m_resource == resource)
                that->m_resource = nullptr;
        }
        delete resource;
    }

    zwp_fullscreen_shell_mode_feedback_v1::Resource *zwp_fullscreen_shell_mode_feedback_v1::bind(struct ::wl_client *client, uint32_t id, int version)
    {
        Q_ASSERT_X(!wl_client_get_object(client, id), "QWaylandObject bind", QStringLiteral("binding to object %1 more than once").arg(id).toLocal8Bit().constData());
        struct ::wl_resource *handle = wl_resource_create(client, &::zwp_fullscreen_shell_mode_feedback_v1_interface, version, id);
        return bind(handle);
    }

    zwp_fullscreen_shell_mode_feedback_v1::Resource *zwp_fullscreen_shell_mode_feedback_v1::bind(struct ::wl_resource *handle)
    {
        Resource *resource = zwp_fullscreen_shell_mode_feedback_v1_allocate();
        resource->zwp_fullscreen_shell_mode_feedback_v1_object = this;

        wl_resource_set_implementation(handle, nullptr, resource, destroy_func);
        resource->handle = handle;
        zwp_fullscreen_shell_mode_feedback_v1_bind_resource(resource);
        return resource;
    }
    zwp_fullscreen_shell_mode_feedback_v1::Resource *zwp_fullscreen_shell_mode_feedback_v1::Resource::fromResource(struct ::wl_resource *resource)
    {
        if (Q_UNLIKELY(!resource))
            return nullptr;
        if (wl_resource_instance_of(resource, &::zwp_fullscreen_shell_mode_feedback_v1_interface, nullptr))
            return static_cast<Resource *>(wl_resource_get_user_data(resource));
        return nullptr;
    }

    void zwp_fullscreen_shell_mode_feedback_v1::send_mode_successful()
    {
        Q_ASSERT_X(m_resource, "zwp_fullscreen_shell_mode_feedback_v1::mode_successful", "Uninitialised resource");
        if (Q_UNLIKELY(!m_resource)) {
            qWarning("could not call zwp_fullscreen_shell_mode_feedback_v1::mode_successful as it's not initialised");
            return;
        }
        send_mode_successful(
            m_resource->handle);
    }

    void zwp_fullscreen_shell_mode_feedback_v1::send_mode_successful(struct ::wl_resource *resource)
    {
        zwp_fullscreen_shell_mode_feedback_v1_send_mode_successful(
            resource);
    }


    void zwp_fullscreen_shell_mode_feedback_v1::send_mode_failed()
    {
        Q_ASSERT_X(m_resource, "zwp_fullscreen_shell_mode_feedback_v1::mode_failed", "Uninitialised resource");
        if (Q_UNLIKELY(!m_resource)) {
            qWarning("could not call zwp_fullscreen_shell_mode_feedback_v1::mode_failed as it's not initialised");
            return;
        }
        send_mode_failed(
            m_resource->handle);
    }

    void zwp_fullscreen_shell_mode_feedback_v1::send_mode_failed(struct ::wl_resource *resource)
    {
        zwp_fullscreen_shell_mode_feedback_v1_send_mode_failed(
            resource);
    }


    void zwp_fullscreen_shell_mode_feedback_v1::send_present_cancelled()
    {
        Q_ASSERT_X(m_resource, "zwp_fullscreen_shell_mode_feedback_v1::present_cancelled", "Uninitialised resource");
        if (Q_UNLIKELY(!m_resource)) {
            qWarning("could not call zwp_fullscreen_shell_mode_feedback_v1::present_cancelled as it's not initialised");
            return;
        }
        send_present_cancelled(
            m_resource->handle);
    }

    void zwp_fullscreen_shell_mode_feedback_v1::send_present_cancelled(struct ::wl_resource *resource)
    {
        zwp_fullscreen_shell_mode_feedback_v1_send_present_cancelled(
            resource);
    }

}

QT_WARNING_POP
QT_END_NAMESPACE

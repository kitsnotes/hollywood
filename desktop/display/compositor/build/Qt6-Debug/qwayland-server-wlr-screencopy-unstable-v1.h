// This file was generated by qtwaylandscanner
// source file is wlr-screencopy-unstable-v1.xml

#ifndef QT_WAYLAND_SERVER_WLR_SCREENCOPY_UNSTABLE_V1
#define QT_WAYLAND_SERVER_WLR_SCREENCOPY_UNSTABLE_V1

#include "wayland-server-core.h"
#include "wayland-wlr-screencopy-unstable-v1-server-protocol.h"
#include <QByteArray>
#include <QMultiMap>
#include <QString>

#ifndef WAYLAND_VERSION_CHECK
#define WAYLAND_VERSION_CHECK(major, minor, micro) \
    ((WAYLAND_VERSION_MAJOR > (major)) || \
    (WAYLAND_VERSION_MAJOR == (major) && WAYLAND_VERSION_MINOR > (minor)) || \
    (WAYLAND_VERSION_MAJOR == (major) && WAYLAND_VERSION_MINOR == (minor) && WAYLAND_VERSION_MICRO >= (micro)))
#endif

QT_BEGIN_NAMESPACE
QT_WARNING_PUSH
QT_WARNING_DISABLE_GCC("-Wmissing-field-initializers")
QT_WARNING_DISABLE_CLANG("-Wmissing-field-initializers")

namespace QtWaylandServer {
    class  zwlr_screencopy_manager_v1
    {
    public:
        zwlr_screencopy_manager_v1(struct ::wl_client *client, uint32_t id, int version);
        zwlr_screencopy_manager_v1(struct ::wl_display *display, int version);
        zwlr_screencopy_manager_v1(struct ::wl_resource *resource);
        zwlr_screencopy_manager_v1();

        virtual ~zwlr_screencopy_manager_v1();

        class Resource
        {
        public:
            Resource() : zwlr_screencopy_manager_v1_object(nullptr), handle(nullptr) {}
            virtual ~Resource() {}

            zwlr_screencopy_manager_v1 *zwlr_screencopy_manager_v1_object;
            zwlr_screencopy_manager_v1 *object() { return zwlr_screencopy_manager_v1_object; } 
            struct ::wl_resource *handle;

            struct ::wl_client *client() const { return wl_resource_get_client(handle); }
            int version() const { return wl_resource_get_version(handle); }

            static Resource *fromResource(struct ::wl_resource *resource);
        };

        void init(struct ::wl_client *client, uint32_t id, int version);
        void init(struct ::wl_display *display, int version);
        void init(struct ::wl_resource *resource);

        Resource *add(struct ::wl_client *client, int version);
        Resource *add(struct ::wl_client *client, uint32_t id, int version);
        Resource *add(struct wl_list *resource_list, struct ::wl_client *client, uint32_t id, int version);

        Resource *resource() { return m_resource; }
        const Resource *resource() const { return m_resource; }

        QMultiMap<struct ::wl_client*, Resource*> resourceMap() { return m_resource_map; }
        const QMultiMap<struct ::wl_client*, Resource*> resourceMap() const { return m_resource_map; }

        bool isGlobal() const { return m_global != nullptr; }
        bool isResource() const { return m_resource != nullptr; }

        static const struct ::wl_interface *interface();
        static QByteArray interfaceName() { return interface()->name; }
        static int interfaceVersion() { return interface()->version; }


    protected:
        virtual Resource *zwlr_screencopy_manager_v1_allocate();

        virtual void zwlr_screencopy_manager_v1_bind_resource(Resource *resource);
        virtual void zwlr_screencopy_manager_v1_destroy_resource(Resource *resource);

        virtual void zwlr_screencopy_manager_v1_capture_output(Resource *resource, uint32_t frame, int32_t overlay_cursor, struct ::wl_resource *output);
        virtual void zwlr_screencopy_manager_v1_capture_output_region(Resource *resource, uint32_t frame, int32_t overlay_cursor, struct ::wl_resource *output, int32_t x, int32_t y, int32_t width, int32_t height);
        virtual void zwlr_screencopy_manager_v1_destroy(Resource *resource);

    private:
        static void bind_func(struct ::wl_client *client, void *data, uint32_t version, uint32_t id);
        static void destroy_func(struct ::wl_resource *client_resource);
        static void display_destroy_func(struct ::wl_listener *listener, void *data);

        Resource *bind(struct ::wl_client *client, uint32_t id, int version);
        Resource *bind(struct ::wl_resource *handle);

        static const struct ::zwlr_screencopy_manager_v1_interface m_zwlr_screencopy_manager_v1_interface;

        static void handle_capture_output(
            ::wl_client *client,
            struct wl_resource *resource,
            uint32_t frame,
            int32_t overlay_cursor,
            struct ::wl_resource *output);
        static void handle_capture_output_region(
            ::wl_client *client,
            struct wl_resource *resource,
            uint32_t frame,
            int32_t overlay_cursor,
            struct ::wl_resource *output,
            int32_t x,
            int32_t y,
            int32_t width,
            int32_t height);
        static void handle_destroy(
            ::wl_client *client,
            struct wl_resource *resource);

        QMultiMap<struct ::wl_client*, Resource*> m_resource_map;
        Resource *m_resource;
        struct ::wl_global *m_global;
        struct DisplayDestroyedListener : ::wl_listener {
            zwlr_screencopy_manager_v1 *parent;
        };
        DisplayDestroyedListener m_displayDestroyedListener;
    };

    class  zwlr_screencopy_frame_v1
    {
    public:
        zwlr_screencopy_frame_v1(struct ::wl_client *client, uint32_t id, int version);
        zwlr_screencopy_frame_v1(struct ::wl_display *display, int version);
        zwlr_screencopy_frame_v1(struct ::wl_resource *resource);
        zwlr_screencopy_frame_v1();

        virtual ~zwlr_screencopy_frame_v1();

        class Resource
        {
        public:
            Resource() : zwlr_screencopy_frame_v1_object(nullptr), handle(nullptr) {}
            virtual ~Resource() {}

            zwlr_screencopy_frame_v1 *zwlr_screencopy_frame_v1_object;
            zwlr_screencopy_frame_v1 *object() { return zwlr_screencopy_frame_v1_object; } 
            struct ::wl_resource *handle;

            struct ::wl_client *client() const { return wl_resource_get_client(handle); }
            int version() const { return wl_resource_get_version(handle); }

            static Resource *fromResource(struct ::wl_resource *resource);
        };

        void init(struct ::wl_client *client, uint32_t id, int version);
        void init(struct ::wl_display *display, int version);
        void init(struct ::wl_resource *resource);

        Resource *add(struct ::wl_client *client, int version);
        Resource *add(struct ::wl_client *client, uint32_t id, int version);
        Resource *add(struct wl_list *resource_list, struct ::wl_client *client, uint32_t id, int version);

        Resource *resource() { return m_resource; }
        const Resource *resource() const { return m_resource; }

        QMultiMap<struct ::wl_client*, Resource*> resourceMap() { return m_resource_map; }
        const QMultiMap<struct ::wl_client*, Resource*> resourceMap() const { return m_resource_map; }

        bool isGlobal() const { return m_global != nullptr; }
        bool isResource() const { return m_resource != nullptr; }

        static const struct ::wl_interface *interface();
        static QByteArray interfaceName() { return interface()->name; }
        static int interfaceVersion() { return interface()->version; }


        enum error {
            error_already_used = 0, // the object has already been used to copy a wl_buffer
            error_invalid_buffer = 1, // buffer attributes are invalid
        };

        enum flags {
            flags_y_invert = 1, // contents are y-inverted
        };

        void send_buffer(uint32_t format, uint32_t width, uint32_t height, uint32_t stride);
        void send_buffer(struct ::wl_resource *resource, uint32_t format, uint32_t width, uint32_t height, uint32_t stride);
        void send_flags(uint32_t flags);
        void send_flags(struct ::wl_resource *resource, uint32_t flags);
        void send_ready(uint32_t tv_sec_hi, uint32_t tv_sec_lo, uint32_t tv_nsec);
        void send_ready(struct ::wl_resource *resource, uint32_t tv_sec_hi, uint32_t tv_sec_lo, uint32_t tv_nsec);
        void send_failed();
        void send_failed(struct ::wl_resource *resource);
        void send_damage(uint32_t x, uint32_t y, uint32_t width, uint32_t height);
        void send_damage(struct ::wl_resource *resource, uint32_t x, uint32_t y, uint32_t width, uint32_t height);
        void send_linux_dmabuf(uint32_t format, uint32_t width, uint32_t height);
        void send_linux_dmabuf(struct ::wl_resource *resource, uint32_t format, uint32_t width, uint32_t height);
        void send_buffer_done();
        void send_buffer_done(struct ::wl_resource *resource);

    protected:
        virtual Resource *zwlr_screencopy_frame_v1_allocate();

        virtual void zwlr_screencopy_frame_v1_bind_resource(Resource *resource);
        virtual void zwlr_screencopy_frame_v1_destroy_resource(Resource *resource);

        virtual void zwlr_screencopy_frame_v1_copy(Resource *resource, struct ::wl_resource *buffer);
        virtual void zwlr_screencopy_frame_v1_destroy(Resource *resource);
        virtual void zwlr_screencopy_frame_v1_copy_with_damage(Resource *resource, struct ::wl_resource *buffer);

    private:
        static void bind_func(struct ::wl_client *client, void *data, uint32_t version, uint32_t id);
        static void destroy_func(struct ::wl_resource *client_resource);
        static void display_destroy_func(struct ::wl_listener *listener, void *data);

        Resource *bind(struct ::wl_client *client, uint32_t id, int version);
        Resource *bind(struct ::wl_resource *handle);

        static const struct ::zwlr_screencopy_frame_v1_interface m_zwlr_screencopy_frame_v1_interface;

        static void handle_copy(
            ::wl_client *client,
            struct wl_resource *resource,
            struct ::wl_resource *buffer);
        static void handle_destroy(
            ::wl_client *client,
            struct wl_resource *resource);
        static void handle_copy_with_damage(
            ::wl_client *client,
            struct wl_resource *resource,
            struct ::wl_resource *buffer);

        QMultiMap<struct ::wl_client*, Resource*> m_resource_map;
        Resource *m_resource;
        struct ::wl_global *m_global;
        struct DisplayDestroyedListener : ::wl_listener {
            zwlr_screencopy_frame_v1 *parent;
        };
        DisplayDestroyedListener m_displayDestroyedListener;
    };
}

QT_WARNING_POP
QT_END_NAMESPACE

#endif

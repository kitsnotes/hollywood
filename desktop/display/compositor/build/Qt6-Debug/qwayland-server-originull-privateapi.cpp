// This file was generated by qtwaylandscanner
// source file is originull-privateapi.xml

#include "qwayland-server-originull-privateapi.h"

QT_BEGIN_NAMESPACE
QT_WARNING_PUSH
QT_WARNING_DISABLE_GCC("-Wmissing-field-initializers")
QT_WARNING_DISABLE_CLANG("-Wmissing-field-initializers")

namespace QtWaylandServer {
    org_originull_privateapi::org_originull_privateapi(struct ::wl_client *client, uint32_t id, int version)
        : m_resource_map()
        , m_resource(nullptr)
        , m_global(nullptr)
    {
        init(client, id, version);
    }

    org_originull_privateapi::org_originull_privateapi(struct ::wl_display *display, int version)
        : m_resource_map()
        , m_resource(nullptr)
        , m_global(nullptr)
    {
        init(display, version);
    }

    org_originull_privateapi::org_originull_privateapi(struct ::wl_resource *resource)
        : m_resource_map()
        , m_resource(nullptr)
        , m_global(nullptr)
    {
        init(resource);
    }

    org_originull_privateapi::org_originull_privateapi()
        : m_resource_map()
        , m_resource(nullptr)
        , m_global(nullptr)
    {
    }

    org_originull_privateapi::~org_originull_privateapi()
    {
        for (auto resource : std::as_const(m_resource_map))
            resource->org_originull_privateapi_object = nullptr;

        if (m_resource)
            m_resource->org_originull_privateapi_object = nullptr;

        if (m_global) {
            wl_global_destroy(m_global);
            wl_list_remove(&m_displayDestroyedListener.link);
        }
    }

    void org_originull_privateapi::init(struct ::wl_client *client, uint32_t id, int version)
    {
        m_resource = bind(client, id, version);
    }

    void org_originull_privateapi::init(struct ::wl_resource *resource)
    {
        m_resource = bind(resource);
    }

    org_originull_privateapi::Resource *org_originull_privateapi::add(struct ::wl_client *client, int version)
    {
        Resource *resource = bind(client, 0, version);
        m_resource_map.insert(client, resource);
        return resource;
    }

    org_originull_privateapi::Resource *org_originull_privateapi::add(struct ::wl_client *client, uint32_t id, int version)
    {
        Resource *resource = bind(client, id, version);
        m_resource_map.insert(client, resource);
        return resource;
    }

    void org_originull_privateapi::init(struct ::wl_display *display, int version)
    {
        m_global = wl_global_create(display, &::org_originull_privateapi_interface, version, this, bind_func);
        m_displayDestroyedListener.notify = org_originull_privateapi::display_destroy_func;
        m_displayDestroyedListener.parent = this;
        wl_display_add_destroy_listener(display, &m_displayDestroyedListener);
    }

    const struct wl_interface *org_originull_privateapi::interface()
    {
        return &::org_originull_privateapi_interface;
    }

    org_originull_privateapi::Resource *org_originull_privateapi::org_originull_privateapi_allocate()
    {
        return new Resource;
    }

    void org_originull_privateapi::org_originull_privateapi_bind_resource(Resource *)
    {
    }

    void org_originull_privateapi::org_originull_privateapi_destroy_resource(Resource *)
    {
    }

    void org_originull_privateapi::bind_func(struct ::wl_client *client, void *data, uint32_t version, uint32_t id)
    {
        org_originull_privateapi *that = static_cast<org_originull_privateapi *>(data);
        that->add(client, id, version);
    }

    void org_originull_privateapi::display_destroy_func(struct ::wl_listener *listener, void *data)
    {
        Q_UNUSED(data);
        org_originull_privateapi *that = static_cast<org_originull_privateapi::DisplayDestroyedListener *>(listener)->parent;
        that->m_global = nullptr;
    }

    void org_originull_privateapi::destroy_func(struct ::wl_resource *client_resource)
    {
        Resource *resource = Resource::fromResource(client_resource);
        Q_ASSERT(resource);
        org_originull_privateapi *that = resource->org_originull_privateapi_object;
        if (Q_LIKELY(that)) {
            that->m_resource_map.remove(resource->client(), resource);
            that->org_originull_privateapi_destroy_resource(resource);

            that = resource->org_originull_privateapi_object;
            if (that && that->m_resource == resource)
                that->m_resource = nullptr;
        }
        delete resource;
    }

    org_originull_privateapi::Resource *org_originull_privateapi::bind(struct ::wl_client *client, uint32_t id, int version)
    {
        Q_ASSERT_X(!wl_client_get_object(client, id), "QWaylandObject bind", QStringLiteral("binding to object %1 more than once").arg(id).toLocal8Bit().constData());
        struct ::wl_resource *handle = wl_resource_create(client, &::org_originull_privateapi_interface, version, id);
        return bind(handle);
    }

    org_originull_privateapi::Resource *org_originull_privateapi::bind(struct ::wl_resource *handle)
    {
        Resource *resource = org_originull_privateapi_allocate();
        resource->org_originull_privateapi_object = this;

        wl_resource_set_implementation(handle, &m_org_originull_privateapi_interface, resource, destroy_func);
        resource->handle = handle;
        org_originull_privateapi_bind_resource(resource);
        return resource;
    }
    org_originull_privateapi::Resource *org_originull_privateapi::Resource::fromResource(struct ::wl_resource *resource)
    {
        if (Q_UNLIKELY(!resource))
            return nullptr;
        if (wl_resource_instance_of(resource, &::org_originull_privateapi_interface, &m_org_originull_privateapi_interface))
            return static_cast<Resource *>(wl_resource_get_user_data(resource));
        return nullptr;
    }

    const struct ::org_originull_privateapi_interface org_originull_privateapi::m_org_originull_privateapi_interface = {
        org_originull_privateapi::handle_provision_menu_server,
        org_originull_privateapi::handle_rotate_wallpaper,
        org_originull_privateapi::handle_register_desktop
    };

    void org_originull_privateapi::org_originull_privateapi_provision_menu_server(Resource *, uint32_t)
    {
    }

    void org_originull_privateapi::org_originull_privateapi_rotate_wallpaper(Resource *)
    {
    }

    void org_originull_privateapi::org_originull_privateapi_register_desktop(Resource *, struct ::wl_resource *)
    {
    }


    void org_originull_privateapi::handle_provision_menu_server(
        ::wl_client *client,
        struct wl_resource *resource,
        uint32_t id)
    {
        Q_UNUSED(client);
        Resource *r = Resource::fromResource(resource);
        if (Q_UNLIKELY(!r->org_originull_privateapi_object)) {
            return;
        }
        static_cast<org_originull_privateapi *>(r->org_originull_privateapi_object)->org_originull_privateapi_provision_menu_server(
            r,
            id);
    }

    void org_originull_privateapi::handle_rotate_wallpaper(
        ::wl_client *client,
        struct wl_resource *resource)
    {
        Q_UNUSED(client);
        Resource *r = Resource::fromResource(resource);
        if (Q_UNLIKELY(!r->org_originull_privateapi_object)) {
            return;
        }
        static_cast<org_originull_privateapi *>(r->org_originull_privateapi_object)->org_originull_privateapi_rotate_wallpaper(
            r);
    }

    void org_originull_privateapi::handle_register_desktop(
        ::wl_client *client,
        struct wl_resource *resource,
        struct ::wl_resource *surface)
    {
        Q_UNUSED(client);
        Resource *r = Resource::fromResource(resource);
        if (Q_UNLIKELY(!r->org_originull_privateapi_object)) {
            return;
        }
        static_cast<org_originull_privateapi *>(r->org_originull_privateapi_object)->org_originull_privateapi_register_desktop(
            r,
            surface);
    }

    org_originull_menuserver::org_originull_menuserver(struct ::wl_client *client, uint32_t id, int version)
        : m_resource_map()
        , m_resource(nullptr)
        , m_global(nullptr)
    {
        init(client, id, version);
    }

    org_originull_menuserver::org_originull_menuserver(struct ::wl_display *display, int version)
        : m_resource_map()
        , m_resource(nullptr)
        , m_global(nullptr)
    {
        init(display, version);
    }

    org_originull_menuserver::org_originull_menuserver(struct ::wl_resource *resource)
        : m_resource_map()
        , m_resource(nullptr)
        , m_global(nullptr)
    {
        init(resource);
    }

    org_originull_menuserver::org_originull_menuserver()
        : m_resource_map()
        , m_resource(nullptr)
        , m_global(nullptr)
    {
    }

    org_originull_menuserver::~org_originull_menuserver()
    {
        for (auto resource : std::as_const(m_resource_map))
            resource->org_originull_menuserver_object = nullptr;

        if (m_resource)
            m_resource->org_originull_menuserver_object = nullptr;

        if (m_global) {
            wl_global_destroy(m_global);
            wl_list_remove(&m_displayDestroyedListener.link);
        }
    }

    void org_originull_menuserver::init(struct ::wl_client *client, uint32_t id, int version)
    {
        m_resource = bind(client, id, version);
    }

    void org_originull_menuserver::init(struct ::wl_resource *resource)
    {
        m_resource = bind(resource);
    }

    org_originull_menuserver::Resource *org_originull_menuserver::add(struct ::wl_client *client, int version)
    {
        Resource *resource = bind(client, 0, version);
        m_resource_map.insert(client, resource);
        return resource;
    }

    org_originull_menuserver::Resource *org_originull_menuserver::add(struct ::wl_client *client, uint32_t id, int version)
    {
        Resource *resource = bind(client, id, version);
        m_resource_map.insert(client, resource);
        return resource;
    }

    void org_originull_menuserver::init(struct ::wl_display *display, int version)
    {
        m_global = wl_global_create(display, &::org_originull_menuserver_interface, version, this, bind_func);
        m_displayDestroyedListener.notify = org_originull_menuserver::display_destroy_func;
        m_displayDestroyedListener.parent = this;
        wl_display_add_destroy_listener(display, &m_displayDestroyedListener);
    }

    const struct wl_interface *org_originull_menuserver::interface()
    {
        return &::org_originull_menuserver_interface;
    }

    org_originull_menuserver::Resource *org_originull_menuserver::org_originull_menuserver_allocate()
    {
        return new Resource;
    }

    void org_originull_menuserver::org_originull_menuserver_bind_resource(Resource *)
    {
    }

    void org_originull_menuserver::org_originull_menuserver_destroy_resource(Resource *)
    {
    }

    void org_originull_menuserver::bind_func(struct ::wl_client *client, void *data, uint32_t version, uint32_t id)
    {
        org_originull_menuserver *that = static_cast<org_originull_menuserver *>(data);
        that->add(client, id, version);
    }

    void org_originull_menuserver::display_destroy_func(struct ::wl_listener *listener, void *data)
    {
        Q_UNUSED(data);
        org_originull_menuserver *that = static_cast<org_originull_menuserver::DisplayDestroyedListener *>(listener)->parent;
        that->m_global = nullptr;
    }

    void org_originull_menuserver::destroy_func(struct ::wl_resource *client_resource)
    {
        Resource *resource = Resource::fromResource(client_resource);
        Q_ASSERT(resource);
        org_originull_menuserver *that = resource->org_originull_menuserver_object;
        if (Q_LIKELY(that)) {
            that->m_resource_map.remove(resource->client(), resource);
            that->org_originull_menuserver_destroy_resource(resource);

            that = resource->org_originull_menuserver_object;
            if (that && that->m_resource == resource)
                that->m_resource = nullptr;
        }
        delete resource;
    }

    org_originull_menuserver::Resource *org_originull_menuserver::bind(struct ::wl_client *client, uint32_t id, int version)
    {
        Q_ASSERT_X(!wl_client_get_object(client, id), "QWaylandObject bind", QStringLiteral("binding to object %1 more than once").arg(id).toLocal8Bit().constData());
        struct ::wl_resource *handle = wl_resource_create(client, &::org_originull_menuserver_interface, version, id);
        return bind(handle);
    }

    org_originull_menuserver::Resource *org_originull_menuserver::bind(struct ::wl_resource *handle)
    {
        Resource *resource = org_originull_menuserver_allocate();
        resource->org_originull_menuserver_object = this;

        wl_resource_set_implementation(handle, nullptr, resource, destroy_func);
        resource->handle = handle;
        org_originull_menuserver_bind_resource(resource);
        return resource;
    }
    org_originull_menuserver::Resource *org_originull_menuserver::Resource::fromResource(struct ::wl_resource *resource)
    {
        if (Q_UNLIKELY(!resource))
            return nullptr;
        if (wl_resource_instance_of(resource, &::org_originull_menuserver_interface, nullptr))
            return static_cast<Resource *>(wl_resource_get_user_data(resource));
        return nullptr;
    }

    void org_originull_menuserver::send_appmenu_top_level_window_changed(const QString &service_name, const QString &object_path)
    {
        Q_ASSERT_X(m_resource, "org_originull_menuserver::appmenu_top_level_window_changed", "Uninitialised resource");
        if (Q_UNLIKELY(!m_resource)) {
            qWarning("could not call org_originull_menuserver::appmenu_top_level_window_changed as it's not initialised");
            return;
        }
        send_appmenu_top_level_window_changed(
            m_resource->handle,
            service_name,
            object_path);
    }

    void org_originull_menuserver::send_appmenu_top_level_window_changed(struct ::wl_resource *resource, const QString &service_name, const QString &object_path)
    {
        org_originull_menuserver_send_appmenu_top_level_window_changed(
            resource,
            service_name.toUtf8().constData(),
            object_path.toUtf8().constData());
    }

}

QT_WARNING_POP
QT_END_NAMESPACE

// This file was generated by qtwaylandscanner
// source file is fullscreen-shell-unstable-v1.xml

#ifndef QT_WAYLAND_SERVER_FULLSCREEN_SHELL_UNSTABLE_V1
#define QT_WAYLAND_SERVER_FULLSCREEN_SHELL_UNSTABLE_V1

#include "wayland-server-core.h"
#include "wayland-fullscreen-shell-unstable-v1-server-protocol.h"
#include <QByteArray>
#include <QMultiMap>
#include <QString>

#ifndef WAYLAND_VERSION_CHECK
#define WAYLAND_VERSION_CHECK(major, minor, micro) \
    ((WAYLAND_VERSION_MAJOR > (major)) || \
    (WAYLAND_VERSION_MAJOR == (major) && WAYLAND_VERSION_MINOR > (minor)) || \
    (WAYLAND_VERSION_MAJOR == (major) && WAYLAND_VERSION_MINOR == (minor) && WAYLAND_VERSION_MICRO >= (micro)))
#endif

QT_BEGIN_NAMESPACE
QT_WARNING_PUSH
QT_WARNING_DISABLE_GCC("-Wmissing-field-initializers")
QT_WARNING_DISABLE_CLANG("-Wmissing-field-initializers")

namespace QtWaylandServer {
    class  zwp_fullscreen_shell_v1
    {
    public:
        zwp_fullscreen_shell_v1(struct ::wl_client *client, uint32_t id, int version);
        zwp_fullscreen_shell_v1(struct ::wl_display *display, int version);
        zwp_fullscreen_shell_v1(struct ::wl_resource *resource);
        zwp_fullscreen_shell_v1();

        virtual ~zwp_fullscreen_shell_v1();

        class Resource
        {
        public:
            Resource() : zwp_fullscreen_shell_v1_object(nullptr), handle(nullptr) {}
            virtual ~Resource() {}

            zwp_fullscreen_shell_v1 *zwp_fullscreen_shell_v1_object;
            zwp_fullscreen_shell_v1 *object() { return zwp_fullscreen_shell_v1_object; } 
            struct ::wl_resource *handle;

            struct ::wl_client *client() const { return wl_resource_get_client(handle); }
            int version() const { return wl_resource_get_version(handle); }

            static Resource *fromResource(struct ::wl_resource *resource);
        };

        void init(struct ::wl_client *client, uint32_t id, int version);
        void init(struct ::wl_display *display, int version);
        void init(struct ::wl_resource *resource);

        Resource *add(struct ::wl_client *client, int version);
        Resource *add(struct ::wl_client *client, uint32_t id, int version);
        Resource *add(struct wl_list *resource_list, struct ::wl_client *client, uint32_t id, int version);

        Resource *resource() { return m_resource; }
        const Resource *resource() const { return m_resource; }

        QMultiMap<struct ::wl_client*, Resource*> resourceMap() { return m_resource_map; }
        const QMultiMap<struct ::wl_client*, Resource*> resourceMap() const { return m_resource_map; }

        bool isGlobal() const { return m_global != nullptr; }
        bool isResource() const { return m_resource != nullptr; }

        static const struct ::wl_interface *interface();
        static QByteArray interfaceName() { return interface()->name; }
        static int interfaceVersion() { return interface()->version; }


        enum capability {
            capability_arbitrary_modes = 1, // compositor is capable of almost any output mode
            capability_cursor_plane = 2, // compositor has a separate cursor plane
        };

        enum present_method {
            present_method_default = 0, // no preference, apply default policy
            present_method_center = 1, // center the surface on the output
            present_method_zoom = 2, // scale the surface, preserving aspect ratio, to the largest size that will fit on the output
            present_method_zoom_crop = 3, // scale the surface, preserving aspect ratio, to fully fill the output cropping if needed
            present_method_stretch = 4, // scale the surface to the size of the output ignoring aspect ratio
        };

        enum error {
            error_invalid_method = 0, // present_method is not known
            error_role = 1, // given wl_surface has another role
        };

        void send_capability(uint32_t capability);
        void send_capability(struct ::wl_resource *resource, uint32_t capability);

    protected:
        virtual Resource *zwp_fullscreen_shell_v1_allocate();

        virtual void zwp_fullscreen_shell_v1_bind_resource(Resource *resource);
        virtual void zwp_fullscreen_shell_v1_destroy_resource(Resource *resource);

        virtual void zwp_fullscreen_shell_v1_release(Resource *resource);
        virtual void zwp_fullscreen_shell_v1_present_surface(Resource *resource, struct ::wl_resource *surface, uint32_t method, struct ::wl_resource *output);
        virtual void zwp_fullscreen_shell_v1_present_surface_for_mode(Resource *resource, struct ::wl_resource *surface, struct ::wl_resource *output, int32_t framerate, uint32_t feedback);

    private:
        static void bind_func(struct ::wl_client *client, void *data, uint32_t version, uint32_t id);
        static void destroy_func(struct ::wl_resource *client_resource);
        static void display_destroy_func(struct ::wl_listener *listener, void *data);

        Resource *bind(struct ::wl_client *client, uint32_t id, int version);
        Resource *bind(struct ::wl_resource *handle);

        static const struct ::zwp_fullscreen_shell_v1_interface m_zwp_fullscreen_shell_v1_interface;

        static void handle_release(
            ::wl_client *client,
            struct wl_resource *resource);
        static void handle_present_surface(
            ::wl_client *client,
            struct wl_resource *resource,
            struct ::wl_resource *surface,
            uint32_t method,
            struct ::wl_resource *output);
        static void handle_present_surface_for_mode(
            ::wl_client *client,
            struct wl_resource *resource,
            struct ::wl_resource *surface,
            struct ::wl_resource *output,
            int32_t framerate,
            uint32_t feedback);

        QMultiMap<struct ::wl_client*, Resource*> m_resource_map;
        Resource *m_resource;
        struct ::wl_global *m_global;
        struct DisplayDestroyedListener : ::wl_listener {
            zwp_fullscreen_shell_v1 *parent;
        };
        DisplayDestroyedListener m_displayDestroyedListener;
    };

    class  zwp_fullscreen_shell_mode_feedback_v1
    {
    public:
        zwp_fullscreen_shell_mode_feedback_v1(struct ::wl_client *client, uint32_t id, int version);
        zwp_fullscreen_shell_mode_feedback_v1(struct ::wl_display *display, int version);
        zwp_fullscreen_shell_mode_feedback_v1(struct ::wl_resource *resource);
        zwp_fullscreen_shell_mode_feedback_v1();

        virtual ~zwp_fullscreen_shell_mode_feedback_v1();

        class Resource
        {
        public:
            Resource() : zwp_fullscreen_shell_mode_feedback_v1_object(nullptr), handle(nullptr) {}
            virtual ~Resource() {}

            zwp_fullscreen_shell_mode_feedback_v1 *zwp_fullscreen_shell_mode_feedback_v1_object;
            zwp_fullscreen_shell_mode_feedback_v1 *object() { return zwp_fullscreen_shell_mode_feedback_v1_object; } 
            struct ::wl_resource *handle;

            struct ::wl_client *client() const { return wl_resource_get_client(handle); }
            int version() const { return wl_resource_get_version(handle); }

            static Resource *fromResource(struct ::wl_resource *resource);
        };

        void init(struct ::wl_client *client, uint32_t id, int version);
        void init(struct ::wl_display *display, int version);
        void init(struct ::wl_resource *resource);

        Resource *add(struct ::wl_client *client, int version);
        Resource *add(struct ::wl_client *client, uint32_t id, int version);
        Resource *add(struct wl_list *resource_list, struct ::wl_client *client, uint32_t id, int version);

        Resource *resource() { return m_resource; }
        const Resource *resource() const { return m_resource; }

        QMultiMap<struct ::wl_client*, Resource*> resourceMap() { return m_resource_map; }
        const QMultiMap<struct ::wl_client*, Resource*> resourceMap() const { return m_resource_map; }

        bool isGlobal() const { return m_global != nullptr; }
        bool isResource() const { return m_resource != nullptr; }

        static const struct ::wl_interface *interface();
        static QByteArray interfaceName() { return interface()->name; }
        static int interfaceVersion() { return interface()->version; }


        void send_mode_successful();
        void send_mode_successful(struct ::wl_resource *resource);
        void send_mode_failed();
        void send_mode_failed(struct ::wl_resource *resource);
        void send_present_cancelled();
        void send_present_cancelled(struct ::wl_resource *resource);

    protected:
        virtual Resource *zwp_fullscreen_shell_mode_feedback_v1_allocate();

        virtual void zwp_fullscreen_shell_mode_feedback_v1_bind_resource(Resource *resource);
        virtual void zwp_fullscreen_shell_mode_feedback_v1_destroy_resource(Resource *resource);

    private:
        static void bind_func(struct ::wl_client *client, void *data, uint32_t version, uint32_t id);
        static void destroy_func(struct ::wl_resource *client_resource);
        static void display_destroy_func(struct ::wl_listener *listener, void *data);

        Resource *bind(struct ::wl_client *client, uint32_t id, int version);
        Resource *bind(struct ::wl_resource *handle);

        QMultiMap<struct ::wl_client*, Resource*> m_resource_map;
        Resource *m_resource;
        struct ::wl_global *m_global;
        struct DisplayDestroyedListener : ::wl_listener {
            zwp_fullscreen_shell_mode_feedback_v1 *parent;
        };
        DisplayDestroyedListener m_displayDestroyedListener;
    };
}

QT_WARNING_POP
QT_END_NAMESPACE

#endif

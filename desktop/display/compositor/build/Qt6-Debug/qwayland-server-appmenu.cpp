// This file was generated by qtwaylandscanner
// source file is appmenu.xml

#include "qwayland-server-appmenu.h"

QT_BEGIN_NAMESPACE
QT_WARNING_PUSH
QT_WARNING_DISABLE_GCC("-Wmissing-field-initializers")
QT_WARNING_DISABLE_CLANG("-Wmissing-field-initializers")

namespace QtWaylandServer {
    org_kde_kwin_appmenu_manager::org_kde_kwin_appmenu_manager(struct ::wl_client *client, uint32_t id, int version)
        : m_resource_map()
        , m_resource(nullptr)
        , m_global(nullptr)
    {
        init(client, id, version);
    }

    org_kde_kwin_appmenu_manager::org_kde_kwin_appmenu_manager(struct ::wl_display *display, int version)
        : m_resource_map()
        , m_resource(nullptr)
        , m_global(nullptr)
    {
        init(display, version);
    }

    org_kde_kwin_appmenu_manager::org_kde_kwin_appmenu_manager(struct ::wl_resource *resource)
        : m_resource_map()
        , m_resource(nullptr)
        , m_global(nullptr)
    {
        init(resource);
    }

    org_kde_kwin_appmenu_manager::org_kde_kwin_appmenu_manager()
        : m_resource_map()
        , m_resource(nullptr)
        , m_global(nullptr)
    {
    }

    org_kde_kwin_appmenu_manager::~org_kde_kwin_appmenu_manager()
    {
        for (auto resource : std::as_const(m_resource_map))
            resource->org_kde_kwin_appmenu_manager_object = nullptr;

        if (m_resource)
            m_resource->org_kde_kwin_appmenu_manager_object = nullptr;

        if (m_global) {
            wl_global_destroy(m_global);
            wl_list_remove(&m_displayDestroyedListener.link);
        }
    }

    void org_kde_kwin_appmenu_manager::init(struct ::wl_client *client, uint32_t id, int version)
    {
        m_resource = bind(client, id, version);
    }

    void org_kde_kwin_appmenu_manager::init(struct ::wl_resource *resource)
    {
        m_resource = bind(resource);
    }

    org_kde_kwin_appmenu_manager::Resource *org_kde_kwin_appmenu_manager::add(struct ::wl_client *client, int version)
    {
        Resource *resource = bind(client, 0, version);
        m_resource_map.insert(client, resource);
        return resource;
    }

    org_kde_kwin_appmenu_manager::Resource *org_kde_kwin_appmenu_manager::add(struct ::wl_client *client, uint32_t id, int version)
    {
        Resource *resource = bind(client, id, version);
        m_resource_map.insert(client, resource);
        return resource;
    }

    void org_kde_kwin_appmenu_manager::init(struct ::wl_display *display, int version)
    {
        m_global = wl_global_create(display, &::org_kde_kwin_appmenu_manager_interface, version, this, bind_func);
        m_displayDestroyedListener.notify = org_kde_kwin_appmenu_manager::display_destroy_func;
        m_displayDestroyedListener.parent = this;
        wl_display_add_destroy_listener(display, &m_displayDestroyedListener);
    }

    const struct wl_interface *org_kde_kwin_appmenu_manager::interface()
    {
        return &::org_kde_kwin_appmenu_manager_interface;
    }

    org_kde_kwin_appmenu_manager::Resource *org_kde_kwin_appmenu_manager::org_kde_kwin_appmenu_manager_allocate()
    {
        return new Resource;
    }

    void org_kde_kwin_appmenu_manager::org_kde_kwin_appmenu_manager_bind_resource(Resource *)
    {
    }

    void org_kde_kwin_appmenu_manager::org_kde_kwin_appmenu_manager_destroy_resource(Resource *)
    {
    }

    void org_kde_kwin_appmenu_manager::bind_func(struct ::wl_client *client, void *data, uint32_t version, uint32_t id)
    {
        org_kde_kwin_appmenu_manager *that = static_cast<org_kde_kwin_appmenu_manager *>(data);
        that->add(client, id, version);
    }

    void org_kde_kwin_appmenu_manager::display_destroy_func(struct ::wl_listener *listener, void *data)
    {
        Q_UNUSED(data);
        org_kde_kwin_appmenu_manager *that = static_cast<org_kde_kwin_appmenu_manager::DisplayDestroyedListener *>(listener)->parent;
        that->m_global = nullptr;
    }

    void org_kde_kwin_appmenu_manager::destroy_func(struct ::wl_resource *client_resource)
    {
        Resource *resource = Resource::fromResource(client_resource);
        Q_ASSERT(resource);
        org_kde_kwin_appmenu_manager *that = resource->org_kde_kwin_appmenu_manager_object;
        if (Q_LIKELY(that)) {
            that->m_resource_map.remove(resource->client(), resource);
            that->org_kde_kwin_appmenu_manager_destroy_resource(resource);

            that = resource->org_kde_kwin_appmenu_manager_object;
            if (that && that->m_resource == resource)
                that->m_resource = nullptr;
        }
        delete resource;
    }

    org_kde_kwin_appmenu_manager::Resource *org_kde_kwin_appmenu_manager::bind(struct ::wl_client *client, uint32_t id, int version)
    {
        Q_ASSERT_X(!wl_client_get_object(client, id), "QWaylandObject bind", QStringLiteral("binding to object %1 more than once").arg(id).toLocal8Bit().constData());
        struct ::wl_resource *handle = wl_resource_create(client, &::org_kde_kwin_appmenu_manager_interface, version, id);
        return bind(handle);
    }

    org_kde_kwin_appmenu_manager::Resource *org_kde_kwin_appmenu_manager::bind(struct ::wl_resource *handle)
    {
        Resource *resource = org_kde_kwin_appmenu_manager_allocate();
        resource->org_kde_kwin_appmenu_manager_object = this;

        wl_resource_set_implementation(handle, &m_org_kde_kwin_appmenu_manager_interface, resource, destroy_func);
        resource->handle = handle;
        org_kde_kwin_appmenu_manager_bind_resource(resource);
        return resource;
    }
    org_kde_kwin_appmenu_manager::Resource *org_kde_kwin_appmenu_manager::Resource::fromResource(struct ::wl_resource *resource)
    {
        if (Q_UNLIKELY(!resource))
            return nullptr;
        if (wl_resource_instance_of(resource, &::org_kde_kwin_appmenu_manager_interface, &m_org_kde_kwin_appmenu_manager_interface))
            return static_cast<Resource *>(wl_resource_get_user_data(resource));
        return nullptr;
    }

    const struct ::org_kde_kwin_appmenu_manager_interface org_kde_kwin_appmenu_manager::m_org_kde_kwin_appmenu_manager_interface = {
        org_kde_kwin_appmenu_manager::handle_create
    };

    void org_kde_kwin_appmenu_manager::org_kde_kwin_appmenu_manager_create(Resource *, uint32_t, struct ::wl_resource *)
    {
    }


    void org_kde_kwin_appmenu_manager::handle_create(
        ::wl_client *client,
        struct wl_resource *resource,
        uint32_t id,
        struct ::wl_resource *surface)
    {
        Q_UNUSED(client);
        Resource *r = Resource::fromResource(resource);
        if (Q_UNLIKELY(!r->org_kde_kwin_appmenu_manager_object)) {
            return;
        }
        static_cast<org_kde_kwin_appmenu_manager *>(r->org_kde_kwin_appmenu_manager_object)->org_kde_kwin_appmenu_manager_create(
            r,
            id,
            surface);
    }

    org_kde_kwin_appmenu::org_kde_kwin_appmenu(struct ::wl_client *client, uint32_t id, int version)
        : m_resource_map()
        , m_resource(nullptr)
        , m_global(nullptr)
    {
        init(client, id, version);
    }

    org_kde_kwin_appmenu::org_kde_kwin_appmenu(struct ::wl_display *display, int version)
        : m_resource_map()
        , m_resource(nullptr)
        , m_global(nullptr)
    {
        init(display, version);
    }

    org_kde_kwin_appmenu::org_kde_kwin_appmenu(struct ::wl_resource *resource)
        : m_resource_map()
        , m_resource(nullptr)
        , m_global(nullptr)
    {
        init(resource);
    }

    org_kde_kwin_appmenu::org_kde_kwin_appmenu()
        : m_resource_map()
        , m_resource(nullptr)
        , m_global(nullptr)
    {
    }

    org_kde_kwin_appmenu::~org_kde_kwin_appmenu()
    {
        for (auto resource : std::as_const(m_resource_map))
            resource->org_kde_kwin_appmenu_object = nullptr;

        if (m_resource)
            m_resource->org_kde_kwin_appmenu_object = nullptr;

        if (m_global) {
            wl_global_destroy(m_global);
            wl_list_remove(&m_displayDestroyedListener.link);
        }
    }

    void org_kde_kwin_appmenu::init(struct ::wl_client *client, uint32_t id, int version)
    {
        m_resource = bind(client, id, version);
    }

    void org_kde_kwin_appmenu::init(struct ::wl_resource *resource)
    {
        m_resource = bind(resource);
    }

    org_kde_kwin_appmenu::Resource *org_kde_kwin_appmenu::add(struct ::wl_client *client, int version)
    {
        Resource *resource = bind(client, 0, version);
        m_resource_map.insert(client, resource);
        return resource;
    }

    org_kde_kwin_appmenu::Resource *org_kde_kwin_appmenu::add(struct ::wl_client *client, uint32_t id, int version)
    {
        Resource *resource = bind(client, id, version);
        m_resource_map.insert(client, resource);
        return resource;
    }

    void org_kde_kwin_appmenu::init(struct ::wl_display *display, int version)
    {
        m_global = wl_global_create(display, &::org_kde_kwin_appmenu_interface, version, this, bind_func);
        m_displayDestroyedListener.notify = org_kde_kwin_appmenu::display_destroy_func;
        m_displayDestroyedListener.parent = this;
        wl_display_add_destroy_listener(display, &m_displayDestroyedListener);
    }

    const struct wl_interface *org_kde_kwin_appmenu::interface()
    {
        return &::org_kde_kwin_appmenu_interface;
    }

    org_kde_kwin_appmenu::Resource *org_kde_kwin_appmenu::org_kde_kwin_appmenu_allocate()
    {
        return new Resource;
    }

    void org_kde_kwin_appmenu::org_kde_kwin_appmenu_bind_resource(Resource *)
    {
    }

    void org_kde_kwin_appmenu::org_kde_kwin_appmenu_destroy_resource(Resource *)
    {
    }

    void org_kde_kwin_appmenu::bind_func(struct ::wl_client *client, void *data, uint32_t version, uint32_t id)
    {
        org_kde_kwin_appmenu *that = static_cast<org_kde_kwin_appmenu *>(data);
        that->add(client, id, version);
    }

    void org_kde_kwin_appmenu::display_destroy_func(struct ::wl_listener *listener, void *data)
    {
        Q_UNUSED(data);
        org_kde_kwin_appmenu *that = static_cast<org_kde_kwin_appmenu::DisplayDestroyedListener *>(listener)->parent;
        that->m_global = nullptr;
    }

    void org_kde_kwin_appmenu::destroy_func(struct ::wl_resource *client_resource)
    {
        Resource *resource = Resource::fromResource(client_resource);
        Q_ASSERT(resource);
        org_kde_kwin_appmenu *that = resource->org_kde_kwin_appmenu_object;
        if (Q_LIKELY(that)) {
            that->m_resource_map.remove(resource->client(), resource);
            that->org_kde_kwin_appmenu_destroy_resource(resource);

            that = resource->org_kde_kwin_appmenu_object;
            if (that && that->m_resource == resource)
                that->m_resource = nullptr;
        }
        delete resource;
    }

    org_kde_kwin_appmenu::Resource *org_kde_kwin_appmenu::bind(struct ::wl_client *client, uint32_t id, int version)
    {
        Q_ASSERT_X(!wl_client_get_object(client, id), "QWaylandObject bind", QStringLiteral("binding to object %1 more than once").arg(id).toLocal8Bit().constData());
        struct ::wl_resource *handle = wl_resource_create(client, &::org_kde_kwin_appmenu_interface, version, id);
        return bind(handle);
    }

    org_kde_kwin_appmenu::Resource *org_kde_kwin_appmenu::bind(struct ::wl_resource *handle)
    {
        Resource *resource = org_kde_kwin_appmenu_allocate();
        resource->org_kde_kwin_appmenu_object = this;

        wl_resource_set_implementation(handle, &m_org_kde_kwin_appmenu_interface, resource, destroy_func);
        resource->handle = handle;
        org_kde_kwin_appmenu_bind_resource(resource);
        return resource;
    }
    org_kde_kwin_appmenu::Resource *org_kde_kwin_appmenu::Resource::fromResource(struct ::wl_resource *resource)
    {
        if (Q_UNLIKELY(!resource))
            return nullptr;
        if (wl_resource_instance_of(resource, &::org_kde_kwin_appmenu_interface, &m_org_kde_kwin_appmenu_interface))
            return static_cast<Resource *>(wl_resource_get_user_data(resource));
        return nullptr;
    }

    const struct ::org_kde_kwin_appmenu_interface org_kde_kwin_appmenu::m_org_kde_kwin_appmenu_interface = {
        org_kde_kwin_appmenu::handle_set_address,
        org_kde_kwin_appmenu::handle_release
    };

    void org_kde_kwin_appmenu::org_kde_kwin_appmenu_set_address(Resource *, const QString &, const QString &)
    {
    }

    void org_kde_kwin_appmenu::org_kde_kwin_appmenu_release(Resource *)
    {
    }


    void org_kde_kwin_appmenu::handle_set_address(
        ::wl_client *client,
        struct wl_resource *resource,
        const char *service_name,
        const char *object_path)
    {
        Q_UNUSED(client);
        Resource *r = Resource::fromResource(resource);
        if (Q_UNLIKELY(!r->org_kde_kwin_appmenu_object)) {
            return;
        }
        static_cast<org_kde_kwin_appmenu *>(r->org_kde_kwin_appmenu_object)->org_kde_kwin_appmenu_set_address(
            r,
            QString::fromUtf8(service_name),
            QString::fromUtf8(object_path));
    }

    void org_kde_kwin_appmenu::handle_release(
        ::wl_client *client,
        struct wl_resource *resource)
    {
        Q_UNUSED(client);
        Resource *r = Resource::fromResource(resource);
        if (Q_UNLIKELY(!r->org_kde_kwin_appmenu_object)) {
            wl_resource_destroy(resource);
            return;
        }
        static_cast<org_kde_kwin_appmenu *>(r->org_kde_kwin_appmenu_object)->org_kde_kwin_appmenu_release(
            r);
    }
}

QT_WARNING_POP
QT_END_NAMESPACE
